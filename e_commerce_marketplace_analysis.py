# -*- coding: utf-8 -*-
"""E_Commerce_Marketplace_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NQzgZH1RrjyGLBGdtL_9lk-9X1bTVMwx

# PERSONAL DATA

### **Nurkholiq Agani Hafid**

Email: nurkholiq.agani.hafid@gmail.com

ID Dicoding: [blue_devil_nur](https://www.dicoding.com/users/blue_devil_nur)


Portfolio:
* [Instagram](https://www.instagram.com/mecoliqnur/)
* [LinkedIn](https://www.linkedin.com/in/nurkholiqaganihafid/)
* [Github](https://github.com/nurkholiqaganihafid)
* [Tableau Public](https://public.tableau.com/app/profile/nurkholiq.agani.hafid/vizzes)

# DESCRIPTION

- **Brazilian E-Commerce Marketplace** adalah dataset komersial nyata yang berisi informasi tentang 100 ribu pesanan dari 2016 hingga 2018 di berbagai pasar di Brasil. Analisis yang dapat dilakukan meliputi status pesanan, harga, pembayaran, pengiriman, lokasi pelanggan, atribut produk, dan ulasan pelanggan.

- **Tujuan** dari analisis ini adalah untuk memberikan wawasan yang berharga kepada bisnis e-commerce dalam mengoptimalkan strategi penjualan, meningkatkan kepuasan pelanggan, dan mengoptimalkan pengiriman produk.

- Database ini terdiri dari sembilan tabel, antara lain **customers_dataset, geolocation_dataset, order_items_dataset, order_payments_dataset, order_reviews_dataset, orders_dataset, product_category_name_translation, products_dataset**, dan **sellers_dataset**.

- [Sumber dataset](https://www.kaggle.com/datasets/olistbr/brazilian-ecommerce)


Pertanyaan bisnis yang akan dijawab melalui analisis data ini antara lain:
1. Bagaimana performa penjualan, jumlah item pesanan, dan pendapatan (revenue) pada E-Commerce dalam beberapa bulan terakhir?
2. Produk apa yang paling banyak dan paling sedikit terjual?
3. Bagaimana distribusi skor review pada produk yang terjual dan berapa persentasenya setiap review?
4. Bagaimana distribusi waktu pengiriman produk?
5. Bagaimana karakteristik demografis dari pelanggan di sektor e-commerce marketplace?
6. Apakah ada korelasi antara harga produk (`price`) dan biaya pengiriman (`freight_value`)?
7. Bagaimana sebaran geolocation berdasarkan latitude dan longitude di Brasil?

# DATA WRANGLING

## Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.ticker as ticker
import geopandas as gpd

from matplotlib.colors import LinearSegmentedColormap

import warnings
warnings.filterwarnings('ignore')

pd.set_option('display.max_columns', None)
plt.rc('axes', grid=True)

# %matplotlib inline

"""## Gathering Data

### Customers
"""

customers_df = pd.read_csv('https://raw.githubusercontent.com/nurkholiqaganihafid/E_Commerce_Marketplace_Analysis/main/dataset/customers_dataset.csv')
customers_df.head()

"""### Geolocation"""

geo_df = pd.read_csv('https://raw.githubusercontent.com/nurkholiqaganihafid/E_Commerce_Marketplace_Analysis/main/dataset/geolocation_dataset.csv')
geo_df.head()

"""### Order Items"""

order_items_df = pd.read_csv('https://raw.githubusercontent.com/nurkholiqaganihafid/E_Commerce_Marketplace_Analysis/main/dataset/order_items_dataset.csv')
order_items_df.head()

"""### Order Payments"""

order_pay_df = pd.read_csv('https://raw.githubusercontent.com/nurkholiqaganihafid/E_Commerce_Marketplace_Analysis/main/dataset/order_payments_dataset.csv')
order_pay_df.head()

"""### Order Reviews"""

order_rev_df = pd.read_csv('https://raw.githubusercontent.com/nurkholiqaganihafid/E_Commerce_Marketplace_Analysis/main/dataset/order_reviews_dataset.csv')
order_rev_df.head()

"""### Orders"""

orders_df = pd.read_csv('https://raw.githubusercontent.com/nurkholiqaganihafid/E_Commerce_Marketplace_Analysis/main/dataset/orders_dataset.csv')
orders_df.head()

"""### Product Category Name Translation"""

product_category_df = pd.read_csv('https://raw.githubusercontent.com/nurkholiqaganihafid/E_Commerce_Marketplace_Analysis/main/dataset/product_category_name_translation.csv')
product_category_df.head()

"""### Products"""

products_df = pd.read_csv('https://raw.githubusercontent.com/nurkholiqaganihafid/E_Commerce_Marketplace_Analysis/main/dataset/products_dataset.csv')
products_df.head()

"""### Sellers"""

sellers_df = pd.read_csv('https://raw.githubusercontent.com/nurkholiqaganihafid/E_Commerce_Marketplace_Analysis/main/dataset/sellers_dataset.csv')
sellers_df.head()

"""## Assessing Data

### Customers
"""

customers_df.info()

customers_df.isnull().sum()

"""- Output di atas menunjukkan bahwa tidak ada missing values."""

print('Number of duplicates in customer data: ', customers_df.duplicated().sum())

customers_df.describe()

"""- Output di atas tidak terdapat inaccurate value (sesuai dengan detail legend dataset)

### Geolocation
"""

geo_df.info()

"""- Tidak ada missing value pada data `geo_df`"""

print('Number of duplicates in geolocation data: ', geo_df.duplicated().sum())

geo_df.describe()

"""- Tidak ada nilai yang aneh dalam output `geo_df` di atas. Karena ini adalah geolocation, maka kami belum bisa memastikannya.

### Order Items
"""

order_items_df.info()

"""- Tidak ada missing value pada data `order_items_df`
- Kolom `shipping_limit_date` tersebut harusnya tipe data **datetime**, bukan **object**
"""

print('Number of duplicates in order item data: ', order_items_df.duplicated().sum())

order_items_df.describe()

"""- Tidak ada nilai yang aneh dalam output `order_items_df` di atas

### Order Payments
"""

order_pay_df.info()

"""- Tidak ada missing value pada data `order_pay_df`"""

print('Number of duplicates in order payment data: ', order_pay_df.duplicated().sum())

order_pay_df.describe()

"""- Tidak ada nilai yang aneh dalam output `order_pay_df` di atas

### Order Reviews
"""

order_rev_df.info()

"""- Kolom `review_creation_date` dan `review_answer_timestamp` tersebut harusnya tipe data **datetime**, bukan **object**"""

order_rev_df.isnull().sum()

"""- Terdapat missing values pada kolom `review_comment_title` dan `review_comment_message`"""

print('Number of duplicates in order review data: ', order_rev_df.duplicated().sum())

order_rev_df.describe()

"""- Output di atas tidak ada inaccurate value atau sesuai dengan detail legend dataset yaitu score 1-5

### Orders
"""

orders_df.info()

"""- Ada missing value pada data `orders_df`
- Terdapat kesalahan tipe data pada kolom `order_purchase_timestamp`, `order_approved_at`, `order_delivered_carrier_date`, `order_delivered_customer_date` dan `order_estimated_delivery_date`
- Kelima kolom tersebut harusnya tipe data **datetime**, bukan **object**
"""

orders_df.isnull().sum()

"""- Output di atas menunjukkan bahwa terdapat missing values pada ketiga kolom tersebut."""

print('Number of duplicates in order data: ', orders_df.duplicated().sum())

orders_df.describe()

"""- Tidak ada nilai yang aneh pada data `orders_df` di atas

### Product Category Name Translation
"""

product_category_df.info()

print('Number of duplicates in product category data: ', product_category_df.duplicated().sum())

"""### Products"""

products_df.info()

"""- Kolom `product_name_lenght`, `product_description_lenght` dan `product_photos_qty` seharusnya tipe data **Int**. Namun, ini tidak jadi masalah"""

products_df.isnull().sum()

"""- Setiap kolom di atas terdapat missing values kecuali `product_id`."""

print('Number of duplicates in product data: ', products_df.duplicated().sum())

products_df.describe()

"""- Tidak ada nilai yang aneh pada data `products_df` di atas

### Sellers
"""

sellers_df.info()

"""- Tidak ada missing value pada data `sellers_df`"""

print('Number of duplicates in seller data: ', sellers_df.duplicated().sum())

sellers_df.describe()

"""- Output di atas tidak ada inaccurate value atau sesuai dengan detail legend dataset (first 5 digits of seller zip code)

## Cleaning Data

### Customers

- `customers_df` data is safe

### Geolocation

- Dalam proses assessing data sebelumnya, bahwa terdapat data yang duplicate pada `geo_df`.
"""

geo_df[geo_df.duplicated()]

"""- Data duplicate **geolocation** tidak perlu **didrop** atau **dihapus** karena dapat memberikan **informasi yang berguna**. Hal ini menunjukkan bahwa beberapa pelanggan berada di lokasi yang sama.
- Data ini dapat digunakan untuk membuat plot map
"""

geo_df.geolocation_city.value_counts()

"""### Order Items

- Dalam proses assessing data sebelumnya, terdapat kesalahan dalam tipe data untuk kolom `shipping_limit_date`.
- Kolom ini akan diganti dengan tipe data `datetime`.
"""

order_items_df['shipping_limit_date'] = pd.to_datetime(order_items_df['shipping_limit_date'])

order_items_df.info()

"""### Order Payments

- `order_pay_df` data is safe

### Order Reviews

#### Changing the data type

- Dalam proses assessing data sebelumnya, terdapat kesalahan dalam tipe data pada kolom `review_creation_date` dan `review_answer_timestamp`
- Kolom ini akan diganti dengan tipe data `datetime`
"""

datetime_columns = ['review_creation_date', 'review_answer_timestamp']

for column in datetime_columns:
  order_rev_df[column] = pd.to_datetime(order_rev_df[column])

order_rev_df.info()

"""#### Handling missing values

> Kolom `review_comment_title`
"""

order_rev_df[order_rev_df.review_comment_title.isnull()]

"""> Kolom `review_comment_message`


"""

order_rev_df[order_rev_df.review_comment_message.isnull()]

"""Berhubung nilai missing values tersebut **opsinal**, maka dapat kita isi dengan nilai `No comment` dengan menggunakan metode **imputasi**."""

fillna_columns = ['review_comment_title', 'review_comment_message']

for column in fillna_columns:
  order_rev_df[column].fillna(value='No comment', inplace=True)

order_rev_df.isnull().sum()

order_rev_df.review_comment_title.value_counts()

"""### Orders

#### Handling missing values

> Kolom `order_approved_at`
"""

orders_df[orders_df.order_approved_at.isnull()]

orders_df.groupby(['order_status', orders_df.order_approved_at.isnull()]).size()

"""Nilai True sama dengan nilai null

> Kolom `order_delivered_carrier_date`
"""

orders_df[orders_df.order_delivered_carrier_date.isnull()]

orders_df.groupby(['order_status', orders_df.order_delivered_carrier_date.isnull()]).size()

"""> Kolom `order_delivered_customer_date`"""

orders_df[orders_df.order_delivered_customer_date.isnull()]

orders_df.groupby(['order_status', orders_df.order_delivered_customer_date.isnull()]).size()

"""- Missing values pada ketiga kolom orders tersebut tidak akan **didrop** atau **diimputasi** karena data tersebut berhubungan dengan order pelanggan.
- Mungkin saja terdapat situasi di mana pelanggan belum memberikan informasi yang diperlukan atau ada proses tertentu yang belum selesai.
- Oleh karena itu, penting untuk tetap mempertahankan data yang ada agar tidak kehilangan informasi penting.

#### Changing the data type

- Dalam proses assessing data sebelumnya, terdapat kesalahan dalam tipe data pada kolom `order_purchase_timestamp`, `order_approved_at`, `order_delivered_carrier_date`, `order_delivered_customer_date` dan `order_estimated_delivery_date`
- Kolom ini akan diganti dengan tipe data `datetime`
"""

datetime_columns = [
    'order_purchase_timestamp',
    'order_approved_at',
    'order_delivered_carrier_date',
    'order_delivered_customer_date',
    'order_estimated_delivery_date'
]

for column in datetime_columns:
  orders_df[column] = pd.to_datetime(orders_df[column])

orders_df.info()

"""### Product Category Name Translation

- `product_category_df` data is safe

### Products

> Kolom `product_category_name`
"""

products_df[products_df.product_category_name.isnull()]

order_items_df[order_items_df['product_id'] == 'a41e356c76fab66334f36de622ecbd3a']

"""- Output di atas menunjukkan bahwa pelanggan yang melakukan order berdasarkan `product_id` dengan kolom `product_category_name` yang memiliki nilai null.
- Jika salah satu pelanggan sudah melakukan order, maka data dengan nilai null tersebut dikatakan valid.

> Kolom `product_height_cm`
"""

products_df[products_df.product_height_cm.isnull()]

order_items_df[order_items_df['product_id'] == '09ff539a621711667c43eba6a3bd8466']

"""- Output di atas menunjukkan bahwa pelanggan yang melakukan order berdasarkan `product_id` dengan kolom `product_weight_g`,	`product_length_cm`, `product_height_cm`,	dan `product_width_cm` yang memiliki nilai null.
- Pelanggan melakukan order (valid).
"""

order_items_df[order_items_df['product_id'] == '5eb564652db742ff8f28759cd8d2652a']

"""- Output di atas menunjukkan bahwa pelanggan yang melakukan order berdasarkan `product_id` dengan **semua kolom** yang memiliki nilai null.
- Pelanggan melakukan order (valid).

> Dari hasil output yang diberikan, dapat disimpulkan bahwa semua kolom yang memiliki nilai null `valid`. Oleh karena itu, tidak perlu menghapus data dengan nilai null tersebut untuk dapat membantu **mempertahankan integritas data**.

### Sellers

- `sellers_df` data is safe

# EXPLORATORY DATA ANALYSIS

## Geolocation
"""

geo_df.sample(3)

geo_df.describe(include='all')

geo_df.groupby(by='geolocation_zip_code_prefix').size().sort_values(ascending=False).reset_index(name='count')

zip_code = geo_df[geo_df['geolocation_zip_code_prefix'] == 24220]
zip_code

zip_code.groupby('geolocation_city').size().sort_values(ascending=False).reset_index(name='count')

zip_code.groupby('geolocation_state').size().sort_values(ascending=False).reset_index(name='count')

"""- Kode pos dengan nilai terbanyak adalah **24220** dengan jumlah sebanyak 1146 data.

## Sellers
"""

sellers_df.sample(3)

sellers_df.describe(include='all')

sellers_df.groupby(by='seller_city').seller_id.nunique().sort_values(ascending=False).reset_index(name='count').head()

"""- Kota dengan jumlah penjual terbanyak adalah **Sao Paulo** dengan jumlah sebanyak **694 penjual**."""

sellers_df.groupby(by='seller_state').seller_id.nunique().sort_values(ascending=False).reset_index(name='count').head()

"""- Negara bagian dengan jumlah penjual terbanyak adalah **SP** dengan **1849 penjual**

## Order Items
"""

order_items_df.sample(3)

order_items_df.describe(include='all')

"""- Tanggal batas pengiriman pelanggan **pertama kali** pada Tgl `2016-09-19 00:15:34`
- Sedangkan tanggal batas pengiriman terakhir dilakukan adalah pada Tgl `2020-04-09 22:35:08`

## Order Items and Sellers

### Merge
"""

order_items_sellers_df = pd.merge(
    left=order_items_df,
    right=sellers_df,
    how='left',
    left_on='seller_id',
    right_on='seller_id'
)
order_items_sellers_df.head()

order_items_sellers_df.info()

"""### Number of orders by seller city"""

order_items_sellers_df.groupby(by='seller_city').order_id.nunique().sort_values(ascending=False).reset_index().head()

"""- Kota dengan jumlah pesanan (`order_id`) terbanyak adalah **Sao Paulo** dengan jumlah sebanyak **24.588 pesanan**.

### Number of orders by seller state
"""

order_items_sellers_df.groupby(by='seller_state').order_id.nunique().sort_values(ascending=False).reset_index()

"""- Negara bagian dengan jumlah pesanan (`order_id`) terbanyak adalah **SP** dengan jumlah sebanyak **70.188 pesanan.**
- Sedangkan pesanan terendah adalah **AC** dengan hanya **1 pesanan.**

## Order Payments
"""

order_pay_df.sample(3)

order_pay_df.describe(include='all')

"""- Jumlah angsuran yang dilakukan pelanggan (`payment_installments`) **min 1 - max 24** angsuran.
- Sedangkan nilai transaksi (`payment_value`) berkisar 0 - 13664
"""

order_pay_df.groupby(by='payment_type').order_id.nunique().sort_values(ascending=False).reset_index()

"""- Berdasarkan output di atas, metode pembayaran yang paling umum digunakan adalah `credit_card`, diikuti oleh `boleto`, `voucher`, dan `debit_card`. Terdapat juga beberapa transaksi dengan jenis pembayaran yang **tidak terdefinisi** (`not_defined`), yang jumlahnya sangat sedikit.

## Order Reviews
"""

order_rev_df.sample(3)

order_rev_df.describe(include='all')

"""- Rata-rata survei kepuasan (`review_score`) pelanggan adalah 4"""

order_rev_df.groupby(by='review_score').review_id.nunique().sort_values(ascending=False).reset_index(name='count')

"""- Skor ulasan yang paling banyak adalah **5**, sebanyak **56.910 ulasan**.
- Hal ini merupakan produk e-commerce memiliki rating yang sangat baik.

## Order Payments and Reviews

### Merge
"""

order_pay_rev_df = pd.merge(
    left=order_pay_df,
    right=order_rev_df,
    how='left',
    left_on='order_id',
    right_on='order_id'
)
order_pay_rev_df.head()

order_pay_rev_df.info()

order_pay_rev_df.duplicated().sum()

order_pay_rev_df[order_pay_rev_df.review_answer_timestamp.isnull()]

"""- Dari output di atas, ternyata masih banyak pelanggang yang masih belum melakukan ulasan terhadap barang yang dia beli.
- Karena ini opsional maka tidak jadi masalah.
- Namun pelanggan lainnya yang belum membeli produk tersebut tidak akan mendapatkan feedback lebih, dengan produk yang sudah dibeli oleh pelanggan lainnya.

### Number of orders by review score
"""

order_pay_rev_df.groupby(by='review_score').order_id.nunique().sort_values(ascending=False).reset_index(name='count')

"""- Skor ulasan dengan nilai **5** memiliki jumlah pesanan yang **paling banyak**, yaitu sebanyak **57.076 pesanan**.

## Orders
"""

orders_df.sample(3)

orders_df.describe(include='all')

orders_df.groupby(by='order_status').order_id.nunique().sort_values(ascending=False).reset_index()

"""- Berdasarkan output di atas, bahwa mayoritas pesanan telah "terkirim" (`delivered`), diikuti dengan pesanan yang "dalam pengiriman" (`shipped`), "dibatalkan" (`canceled`) dan "tidak tersedia" (`unavailable`). Jumlah pesanan yang "terkirim" jauh lebih tinggi dibandingkan dengan jenis status pesanan lainnya seperti "faktur" (`invoiced`), "sedang diproses" (`processing`), "dibuat" (`created`), dan "disetujui" (`approved`).

> Membuat sebuah kolom baru untuk memuat waktu pengiriman pesanan (`order_delivery_time`) tiap order.
"""

order_delivery_time = orders_df['order_delivered_customer_date'] - orders_df['order_purchase_timestamp']
order_delivery_time

order_delivery_time = order_delivery_time.apply(lambda x: x.total_seconds())
order_delivery_time

# Selanjutnya diubah ke dalam satuan hari (dibagi 86400)
orders_df['order_delivery_time'] = round(order_delivery_time/86_400)

orders_df.head(2)

"""> Membuat sebuah kolom baru untuk memuat waktu pengiriman perkiraan pesanan sampai (`estimated_delivery_time`) tiap order."""

estimated_delivery_time = orders_df['order_estimated_delivery_date'] - orders_df['order_delivered_customer_date']
estimated_delivery_time

estimated_delivery_time = estimated_delivery_time.apply(lambda x: x.total_seconds())
estimated_delivery_time

orders_df['estimated_delivery_time'] = round(estimated_delivery_time/86_400)

orders_df.head()

orders_df.describe(include='all')

"""- Dari output di atas, dapat disimpulkan bahwa rata-rata waktu pengiriman pesanan (`order_delivery_time`) adalah **12 hari**, dengan nilai maksimum **210 hari** dan nilai minimum **1 hari**.
- Sedangkan rata-rata waktu pengiriman perkiraan pesanan sampai (`estimated_delivery_time`) adalah **11 hari**, dengan max **146 hari** dan min **-189 hari**.

> Melihat data yang memiliki nilai `-189.000000`, untuk memastikan apakah datanya valid.
"""

orders_df[orders_df['estimated_delivery_time'] == -189.000000]

"""- Dari hasil tersebut ada **kesalahan dalam pengisian data** pada kolom `order_delivered_customer_date` atau **kesalahan dalam perhitungan waktu**.
- Namun, jika di analisa `2018-09-19 23:24:07` manjadi `2018-02-19` atau `2018-03-19`, tidak masuk akal dengan nilai kolom yang lainnya.
- Maka, mari kita analisis lebih lanjut dengan `<= -0`.

> Memastikan apakah ada data yang memiliki nilai kolom `estimated_delivery_time` `<= -0`.
"""

row_with_negative_value = orders_df[orders_df['estimated_delivery_time'] <= -0]
row_with_negative_value

row_with_negative_value.order_status.value_counts()

"""- Ternyata banyak data yang memiliki nilai `<= -0` yaitu `9106 rows` dan `order_status` sudah terkirim (`delivered`).
- Maka dapat dikatakan data tersebut `valid` dan tidak menutup kemungkinan adanya ***human error***.

## Customers
"""

customers_df.sample(3)

customers_df.describe(include='all')

customers_df.groupby(by='customer_city').customer_id.nunique().sort_values(ascending=False).reset_index()

customers_df.groupby(by='customer_state').customer_id.nunique().sort_values(ascending=False).reset_index()

"""- **City** dengan jumlah pelanggan terbanyak adalah **Sao Paulo**, dengan memiliki 15.540 pelanggan.
- Sedangkan **state** dengan jumlah pelanggan terbanyak adalah **SP**.

## Orders and Customers

- Pada data `orders_df` terdapat kolom yang berisi informasi tentang `customer_id` pelanggan yang pernah melakukan order. Informasi ini dapat digunakan untuk mengidentifikasi pelanggan yang **belum** pernah melakukan order.
- Untuk melakukan hal ini, kita dapat membuat kolom baru bernama `status` pada data `customers_df`.
- Kolom `status` ini akan memiliki nilai `"Active"` untuk pelanggan yang pernah melakukan order setidaknya sekali.
- Sebaliknya, kolom `status` akan memiliki nilai `"Non Active"` untuk pelanggan yang belum pernah melakukan order sama sekali.
"""

customer_id_in_orders_df = orders_df.customer_id.to_list()
customers_df['status'] = customers_df['customer_id'].apply(
    lambda x: 'Active' if x in customer_id_in_orders_df else 'Non Active'
)

customers_df.sample(5)

customers_df.groupby(by='status').customer_id.count()

"""- Hasil tersebut menunjukkan bahwa semua pelanggan yang terdaftar **sudah melakukan transaksi** tanpa terkecuali. Hal ini merupakan kabar baik.

### Merge

Melakukan proses merge untuk memperoleh informasi terkait kedua data tersebut.
"""

orders_customers_df = pd.merge(
    left=orders_df,
    right=customers_df,
    how='left',
    left_on='customer_id',
    right_on='customer_id'
)
orders_customers_df.head()

orders_customers_df.info()

"""### Number of orders by customer city"""

orders_customers_df.groupby(by='customer_city').order_id.nunique() \
  .sort_values(ascending=False) \
  .reset_index().head(10)

"""- Kota **Sao Paulo** memiliki jumlah **order terbanyak**.

### Number of orders by customer state
"""

orders_customers_df.groupby(by='customer_state').order_id.nunique() \
  .sort_values(ascending=False) \
  .reset_index().head(5)

"""- **SP** marupakan state yang paling banyak melakukan order.

## Product Category Name Translation
"""

product_category_df.sample(3)

product_category_df.describe(include='all')

"""## Products"""

products_df.sample(3)

products_df.describe(include='all')

"""## Category Name and Product

### Merge
"""

products_in_category_name_df = pd.merge(
    left=products_df,
    right=product_category_df,
    how='left',
    left_on='product_category_name',
    right_on='product_category_name'
)
products_in_category_name_df.head()

products_in_category_name_df.info()

"""### Number of products by category name"""

products_in_category_name_df.groupby(by='product_category_name_english') \
  .product_id.nunique() \
  .sort_values(ascending=False) \
  .reset_index(name='count')

"""- Kategori produk dengan nama `bed_bath_table` memiliki jumlah produk yang paling banyak, yaitu sebanyak **3.029 produk**.
- Sedangkan kategori produk `cds_dvds_musicals` memiliki jumlah produk yang **paling sedikit.**

## Order items_sellers & products_category

### Merge
"""

items_sellers_in_products_category_df = pd.merge(
    left=order_items_sellers_df,
    right=products_in_category_name_df,
    how='left',
    left_on='product_id',
    right_on='product_id'
)
items_sellers_in_products_category_df.head()

items_sellers_in_products_category_df.info()

items_sellers_in_products_category_df.describe(include='all')

"""- Pelanggan melakukan `order` paling besar dengan **price 6.735** mata uang Brasil.

### Number of orders by category name
"""

items_sellers_in_products_category_df.groupby(by='product_category_name_english') \
  .order_id.nunique() \
  .sort_values(ascending=False) \
  .reset_index(name='count')

"""- Kategori produk dengan nama `bed_bath_table` memiliki jumlah pesanan yang **paling banyak**, yaitu sebanyak **9.417 pesanan**.
- Sedangkan kategori produk `security_and_services` memiliki jumlah pesanan yang **paling sedikit**.

### Number of price by state
"""

items_sellers_in_products_category_df.groupby(
    by=['seller_state', 'product_category_name_english']
).agg({
    'order_item_id': 'sum',
    'price': 'sum',
    'freight_value': 'sum'
}).sort_values(by='price', ascending=False)

"""- Hasil pivot table di atas menunjukkan nilai total `price` **tertinggi** adalah penjual di negara bagian **SP** yang menjual produk kategori `watches_gifts`.
- Sedangkan nilai total `price` **terendah** adalah penjual di negara bagian **PR** yang menjual produk kategori `food_drink`.

## Order payments_reviews & orders_customers

### Merge
"""

order_pay_rev_in_orders_customers_df = pd.merge(
    left=order_pay_rev_df,
    right=orders_customers_df,
    how='inner',
    left_on='order_id',
    right_on='order_id'
)
order_pay_rev_in_orders_customers_df.head()

order_pay_rev_in_orders_customers_df.info()

order_pay_rev_in_orders_customers_df.isnull().sum()

"""- Pada tahap cleaning data sudah dilakaukan. Maka, nilai yang memiliki missing value ini tidak jadi masalah.

## Explore all_df Data

### Merge

- Membuat sebuah DataFrame baru yang disebut `all_df`.
- DataFrame ini akan digunakan untuk menggabungkan (`merge`) dan menyimpan semua informasi dari delapan tabel yang ada.
"""

all_df = pd.merge(
    left=items_sellers_in_products_category_df,
    right=order_pay_rev_in_orders_customers_df,
    how='inner',
    left_on='order_id',
    right_on='order_id'
)
all_df.head()

columns_to_rename = [
    'seller_city',
    'product_category_name',
    'product_category_name_english',
    'payment_type',
    'order_status',
    'customer_city'
]

for column in columns_to_rename:
    all_df[column] = all_df[column].str.replace('_', ' ').str.title() \
    .str.replace('And', 'and')

all_df.head(2)

all_df.info()

all_df.isnull().sum()

"""- Pada tahap pembersihan data sebelumnya, sudah dilakukan. Maka, values yang memiliki missing value tidak menjadi masalah."""

all_df.head(2)

"""### By customer state & review score"""

all_df.groupby(by=['customer_state', 'review_score']).agg({
    'order_id': 'nunique',
})

"""- Hasil perhitungan menunjukkan jumlah unik pesanan pelanggan `order_id` untuk setiap kombinasi negara pelanggan dan skor ulasan.

### By product category
"""

all_df.groupby(by='product_category_name_english').agg({
    'order_id': 'nunique',
    'review_score': ['min', 'max', 'mean']
}).sort_values(by=('order_id', 'nunique'), ascending=False)

"""- Melakukan perhitungan jumlah pesanan yang unik (`order_id`), nilai ulasan `min`, `max`, dan `mean`.
- Kategori produk dengan nama `bed_bath_table` memiliki pesanan yang banyak **9417** unik, dengan rata-rata nilai ulasan sebesar **3.89**.

### By product category & review score
"""

all_df.groupby(by=['product_category_name_english', 'review_score']).agg({
    'order_id': 'nunique',
    'order_item_id': 'sum',
    'price': 'sum',
    'freight_value': 'sum'
})

"""- Hasil perhitungan menunjukkan nilai-nilai tersebut untuk setiap kombinasi kategori produk dan review score.
- Pada setiap kombinasi, dilakukan perhitungan jumlah pesanan yang unik (`order_id`), jumlah item pesanan (`order_item_id`), total harga (`price`), dan total biaya pengiriman (`freight_value`).

### By customer state & product category
"""

all_df.groupby(by=['customer_state', 'product_category_name_english']).agg({
    'order_item_id': 'sum',
    'price': 'sum',
    'freight_value': 'sum'
})

"""- Hasil perhitungan menunjukkan jumlah **item pesanan**, **total harga**, dan **total biaya pengiriman** untuk setiap kombinasi **negara pelanggan** dan **kategori produk**.

### By customer city
"""

all_df.groupby(by='customer_city').agg({
    'order_id': 'nunique',
    'price': 'sum'
}).sort_values(by='order_id', ascending=False)

"""- Dari output di atas menunjukkan jumlah **pesanan unik** dan **total harga** untuk setiap **kota pelanggan**.
- Kota **Sao Paulo** memiliki jumlah pesanan unik tertinggi sebanyak **15.402 pesanan**.
"""

all_df.groupby(by='customer_state').agg({
    'order_id': 'nunique',
    'payment_installments': 'sum',
    'payment_value': 'sum'
})

"""- Output di atas menunjukkan jumlah **pesanan unik**, total pembayaran dengan **pembayaran angsuran**, dan **total nilai pembayaran** untuk setiap **negara bagian pelanggan**.

# DATA VISUALIZATION & EXPLANATORY
"""

all_df.head(2)

"""## 1st Question

- Bagaimana performa penjualan, jumlah item pesanan, dan pendapatan (revenue) pada E-Commerce dalam beberapa bulan terakhir?
"""

monthly_orders_df = all_df.resample(rule='M', on='order_approved_at').agg({
    'order_id': 'nunique',
    'order_item_id': 'sum',
    'payment_value': 'sum'
})
monthly_orders_df

monthly_orders_df.rename(columns=({
    'order_id': 'order_count',
    'order_item_id': 'order_item_count',
    'payment_value': 'revenue'
}), inplace=True)

monthly_orders_df.head()

"""### By orders & items"""

sns.set_style('darkgrid')

last_12_months_df = monthly_orders_df[-12:]

x = last_12_months_df.index.strftime('%Y-%m')
y = last_12_months_df[['order_count', 'order_item_count']]

plt.figure(figsize=(20, 8))
plt.plot(x, y, marker='o', linewidth=2)
plt.title('Number of Orders per Month (Last 12 Months)', fontsize=22, pad=12)
plt.xticks(fontsize=16)
plt.yticks(fontsize=16)

for i in range(len(last_12_months_df)):
    plt.text(
        x[i],
        last_12_months_df['order_count'][i] - 100,
        last_12_months_df['order_count'][i],
        ha='left',
        va='top',
        fontsize=12
    )
    plt.text(
        x[i],
        last_12_months_df['order_item_count'][i] - 10,
        last_12_months_df['order_item_count'][i],
        ha='left',
        va='bottom',
        fontsize=12
    )

plt.legend(y, fontsize=14)
plt.tight_layout()

"""- Berdasarkan visualisasi di atas, dapat diamati bahwa bulan dengan jumlah order **terbanyak** adalah **November 2017**.
- Selain itu, terdapat **penurunan drastis** yang signifikan pada bulan **September 2018**.

### By revenue
"""

plt.figure(figsize=(20, 8))
plt.plot(
    x,
    last_12_months_df['revenue'],
    marker='o',
    linewidth=2,
    color='#577fd7'
)
plt.title('Total Revenue per Month (Last 12 Months)', fontsize=22, pad=12)
plt.xticks(fontsize=16)
plt.yticks(fontsize=16)

for i in range(len(last_12_months_df)):
    plt.text(
        x[i],
        last_12_months_df['revenue'][i] + 500,
        '{:,.0f}'.format(last_12_months_df['revenue'][i]),
        ha='left',
        va='bottom',
        fontsize=12
    )

# Mengatur formatter sumbu y
def format_func(value, tick_number):
    return f'{int(value/1000)}K'

formatter = ticker.FuncFormatter(format_func)
plt.gca().yaxis.set_major_formatter(formatter)

plt.tight_layout()

"""- Mengalami jumlah order penurunan yang sangat drastis pada bulan **September 2018**, tentunya hal ini akan menjadi dampak yang sangat besar bagi E-Commerce marketplace untuk keuntungan kedepannya.
- Untuk mengetahui penyebab penurunan tersebut, perlu mempertimbangkan analisis lebih lanjut terkait beberapa faktor seperti keberadaan kompetitor, kampanye pemasaran, dan lain sebagainya.

## 2nd Question

- Produk apa yang paling banyak dan paling sedikit terjual?
"""

sum_order_items_df = all_df.groupby(by='product_category_name_english') \
  .order_item_id.sum() \
  .sort_values(ascending=False).reset_index()

sum_order_items_df

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(24, 6))

colors = ['#577fd7', '#bcccef', '#bcccef', '#bcccef', '#bcccef']

# Plot pertama
sns.barplot(
    x='order_item_id',
    y='product_category_name_english',
    data=sum_order_items_df.head(5),
    palette=colors,
    ax=ax[0]
)
ax[0].set_ylabel(None)
ax[0].set_xlabel(None)
ax[0].set_title('Best Performing Product', loc='center', fontsize=17)
ax[0].tick_params(axis='y', labelsize=14)
ax[0].tick_params(axis='x', labelsize=12)

for i in range(len(sum_order_items_df.head(5))):
    ax[0].text(
        sum_order_items_df['order_item_id'].iloc[i] + 4,
        i,
        sum_order_items_df['order_item_id'].iloc[i],
        va='center',
        fontsize=12
    )

# Plot kedua
asc_sum_order = sum_order_items_df.sort_values(
    by='order_item_id', ascending=True
).head(5)

sns.barplot(
    x='order_item_id',
    y='product_category_name_english',
    data=asc_sum_order,
    palette=colors,
    ax=ax[1]
)
ax[1].set_ylabel(None)
ax[1].set_xlabel(None)
ax[1].invert_xaxis()
ax[1].yaxis.set_label_position('right')
ax[1].yaxis.tick_right()
ax[1].set_title('Worst Performing Product', loc='center', fontsize=17)
ax[1].tick_params(axis='y', labelsize=14)
ax[1].tick_params(axis='x', labelsize=12)

for i, value in enumerate(asc_sum_order['order_item_id']):
    ax[1].text(
        value + 0.7,
        i,
        value,
        va='center',
        fontsize=12
    )

plt.suptitle(
    'Best and Worst Performing Product by Number of Sales',
    fontsize=24, y=1.02
);

"""- Berdasarkan plot di atas, bahwa produk `Bed Bath Table` memiliki penjualan yang **paling tinggi**.
- Sedangkan, produk `Security and Services` memiliki penjualan yang **paling rendah**.

## 3rd Question

- Bagaimana distribusi skor review pada produk yang terjual dan berapa persentasenya setiap review?

### By number of review scores
"""

review_scores = all_df['review_score'].value_counts().sort_values(ascending=False)
review_scores

plt.figure(figsize=(10, 5))
sns.barplot(
    x=review_scores.index,
    y=review_scores.values,
    order=review_scores.index.astype(int),
    palette=colors
)

plt.title('Distribution of Review Scores', fontsize=16, pad=12)
plt.ylabel(None)
plt.xlabel('Rating', fontsize=12)
plt.tick_params(axis='x', labelsize=12)

for i, value in enumerate(review_scores.values):
    plt.text(
        y=value,
        x=i,
        s=value,
        ha='center',
        fontsize=10
    )

plt.tight_layout()

"""- Distribusi ini memberikan gambaran tentang seberapa sering masing-masing skor review muncul pada produk yang terjual.
- **Skor review 5** adalah yang paling banyak muncul dengan jumlah **66.264.**
- Ini menandakan produk yang dibeli sangat baik.

### By percentage review score
"""

review_colors = {
    5: '#577fd7',
    4: '#bcccef',
    3: '#bcccef',
    2: '#bcccef',
    1: '#bcccef'
}

plt.figure(figsize=(8, 6))
percentages = (review_scores / review_scores.sum()) * 100

plt.pie(
    percentages,
    labels=percentages.index.astype(int),
    colors=[review_colors[key] for key in percentages.index.astype(int)],
    autopct='%1.1f%%',
    labeldistance=1.05
)
plt.title('Percentage of Products with Review Score', fontsize=16, pad=12)
plt.axis('equal')

plt.tight_layout()

"""- Persentase pada skor ulasan yang paling tinggi adalah **rating 5** dengan **56.5%**.

## 4th Question

- Bagaimana distribusi waktu pengiriman produk?
"""

all_df['order_delivery_time']

delivery_time_counts = all_df['order_delivery_time'].value_counts().sort_index()

delivery_time_table = pd.DataFrame({'Delivery Time (Days)': delivery_time_counts.index, 'Frequency': delivery_time_counts.values})
delivery_time_table = delivery_time_table.sort_values('Delivery Time (Days)')

delivery_time_table

plt.figure(figsize=(10, 6))
sns.histplot(
    data=all_df,
    x='order_delivery_time',
    kde=True, bins=20, edgecolor='black',
    color='#577fd7'
)
plt.title('Distribution of Order Delivery Time', fontsize=16, pad=12)
plt.xlabel('Delivery Time (Days)', fontsize=12, labelpad=10)
plt.ylabel('Frequency', fontsize=12, labelpad=10)

plt.tight_layout()

"""- Terdapat beberapa pengiriman dengan waktu yang lebih lama, seperti 210 hari, yang memiliki frekuensi sebanyak 1. Namun, frekuensi pengiriman dengan waktu yang sangat lama ini sangat jarang terjadi.
- Sebagian besar pengiriman terjadi dalam rentang waktu 1 hingga 50 hari.

## 5th Question

- Bagaimana karakteristik demografis dari pelanggan di sektor e-commerce marketplace?

### By customer state
"""

bystate_df = all_df.groupby(by='customer_state').order_id.nunique() \
  .sort_values(ascending=False) \
  .reset_index()

bystate_df.head()

order_value_max = bystate_df.loc[bystate_df['order_id'].idxmax(), 'customer_state']

colors_ = [
    '#bcccef' if state != order_value_max else '#577fd7'
    for state in bystate_df['customer_state']
]

plt.figure(figsize=(10, 6))

sns.barplot(
    x=bystate_df['customer_state'],
    y=bystate_df['order_id'],
    palette=colors_
)
plt.title('Number of Orders by Customer State', fontsize=16, pad=12)
plt.xlabel(None)
plt.ylabel(None)

for i, value in enumerate(bystate_df['order_id']):
    plt.text(
        i,
        value,
        str(value),
        ha='center',
        fontsize=7
    )

plt.tight_layout()

"""- **SP** marupakan state yang paling banyak melakukan order.

### By customer city
"""

bycity_df = all_df.groupby(by='customer_city').order_id.nunique() \
  .sort_values(ascending=False) \
  .reset_index().head(10)

bycity_df

plt.figure(figsize=(10, 6))
sns.barplot(x='order_id', y='customer_city', data=bycity_df, palette=colors_)
plt.title('Top 10 Cities by Number of Orders', fontsize=16, pad=12)
plt.xlabel(None)
plt.ylabel(None)

for i, value in enumerate(bycity_df['order_id']):
    plt.text(value, i, str(value), ha='left', va='center', fontsize=8)

plt.tight_layout()

"""- Kota **Sao Paulo** memiliki jumlah order terbanyak.

### By payment type
"""

bypayment_type_df = all_df.groupby(by='payment_type') \
  .order_id.nunique() \
  .sort_values(ascending=False).reset_index()

bypayment_type_df.head()

plt.figure(figsize=(10, 6))
sns.barplot(
    x='order_id',
    y='payment_type',
    data=bypayment_type_df,
    palette=colors
)
plt.title('Number of Orders by Payment Type', fontsize=16, pad=12)
plt.xlabel(None)
plt.ylabel(None)

for i, value in enumerate(bypayment_type_df['order_id']):
    plt.text(value, i, str(value), ha='left', va='center', fontsize=10)

plt.tight_layout()

"""- Berdasarkan output di atas, metode pembayaran yang paling umum digunakan adalah `credit_card`. Terdapat juga transaksi dengan jenis pembayaran (`debit_card`), yang jumlahnya sangat sedikit.

## 6th Question

- Apakah ada korelasi antara harga produk (`price`) dan biaya pengiriman (`freight_value`)?
"""

all_df.head(2)

correlation_matrix = all_df.corr()

plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, vmin=-1., vmax=1., annot=False, cmap='coolwarm', linewidths=0.5)
plt.title('E-Commerce Marketplace Data Correlation', fontsize=16, pad=12)

plt.tight_layout()

"""- Output ini menunjukkan koefisien korelasi dengan variabel lain dalam DataFrame `correlation_matrix` terhadap **E-Commerce marketplace**."""

correlation_matrix['price']

"""- Korelasi antara `price` dengan `freight_value` adalah sebesar **0.415934**, menunjukkan adanya **hubungan positif yang cukup kuat** antara **harga produk** dengan **biaya pengiriman**.
- Namun ada korelasi yang **kuat** yaitu Korelasi antara `price` dengan `payment_value` adalah sebesar **0.739236**, menunjukkan adanya **hubungan positif yang kuat** antara **harga produk** dengan **nilai pembayaran**.
- Sedangkan korelasi lainnya menunjukkan **korelasi positif sedang** maupun hubungan **lemah** atau tidak ada hubungan linier.

## 7th Question

- Bagaimana sebaran geolocation berdasarkan latitude dan longitude di Brasil?
"""

geo_df.sample(3)

# Membuat GeoDataFrame dari DataFrame geo_df
gdf = gpd.GeoDataFrame(
    geo_df,
    geometry=gpd.points_from_xy(geo_df.geolocation_lng, geo_df.geolocation_lat)
)

world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))

# Mengatur skala warna berdasarkan geolocation_zip_code_prefix
min_val = geo_df['geolocation_zip_code_prefix'].min()
max_val = geo_df['geolocation_zip_code_prefix'].max()
cmap = LinearSegmentedColormap.from_list('custom_cmap', ['#fee6e6', '#f40907'])

fig, ax = plt.subplots(figsize=(18, 10))
world.boundary.plot(ax=ax, linewidth=0.5, color='gray')
gdf.plot(
    ax=ax,
    markersize=10,
    column='geolocation_zip_code_prefix',
    cmap=cmap,
    legend=True
)
plt.title('Geolocation Distribution', fontsize=18, pad=14)
plt.xlabel('Longitude', fontsize=14, labelpad=12)
plt.ylabel('Latitude', fontsize=14, labelpad=12)
plt.tick_params(axis='x', labelsize=12)
plt.tick_params(axis='y', labelsize=12)

plt.tight_layout()

"""- Plot geolocation telah dibuat dengan menggambarkan batas negara menggunakan warna merah dan menampilkan titik geolocation.
- Gambar di atas menunjukkan **state SP** yang menempati posisi titik geolocation **paling banyak**.
"""

gdf

gdf.groupby(by='geolocation_state').geolocation_zip_code_prefix.nunique() \
  .sort_values(ascending=False) \
  .reset_index(name='count').head()

"""## Save Data Files"""

all_df.to_csv('all_data.csv', index=False)
geo_df.to_csv('geolocation.csv', index=False)

"""# CONCLUSION & RECOMMENDATION

**Kesimpulan**
- Berdasarkan hasil analisis yang telah dilakukan pada E-Commerce Marketplace, terdapat beberapa temuan penting. Pertama, **performa penjualan, jumlah item pesanan, dan pendapatan** pada E-Commerce dalam beberapa bulan terakhir sangat fluktuatif. Bulan **November 2017** menunjukkan performa yang **sangat baik** dengan **jumlah order** dan **pendapatan yang tinggi**. Namun, terjadi penurunan drastis pada bulan **September 2018** yang berpotensi memberikan dampak **negatif** pada keuntungan kedepannya.

- Selanjutnya, produk yang **paling banyak terjual** adalah `Bed Bath Table`, sementara produk `Security and Services` memiliki penjualan yang **paling rendah**. Hal ini menunjukkan bahwa produk-produk dalam kategori `Bed Bath Table` memiliki popularitas yang tinggi di kalangan pelanggan.

- Dalam hal distribusi **skor review**, **skor 5** mendominasi total review **66.264** dengan **persentase 56.5%**, menandakan bahwa sebagian besar pelanggan memberikan ulasan yang sangat baik terhadap produk yang mereka beli. Ini menunjukkan tingkat kepuasan pelanggan yang tinggi.

- Distribusi waktu **pengiriman produk** cenderung berada dalam **rentang 1 hingga 50 hari**, dengan beberapa kasus **pengiriman lain** yang memakan waktu lebih lama. Namun, pengiriman dengan waktu yang sangat lama ini sangat jarang terjadi.

- Dalam hal **karakteristik demografis pelanggan**, negara bagian **SP** memiliki jumlah order yang **paling banyak**, salah satunya **kota Sao Paulo** merupakan kota dengan jumlah order terbanyak. **Metode pembayaran yang paling umum** digunakan adalah `credit_card`, sementara `debit_card` memiliki jumlah transaksi yang sangat sedikit.

- Terdapat **korelasi positif** yang **cukup kuat** antara **harga produk** dengan **biaya pengiriman**, menunjukkan bahwa semakin tinggi harga produk, semakin tinggi juga biaya pengiriman. Selain itu, terdapat **korelasi positif yang kuat** antara **harga produk** dengan **nilai pembayaran** (`payment_value`), menunjukkan bahwa semakin tinggi harga produk, semakin tinggi juga nilai pembayaran yang dilakukan oleh pelanggan.

- Sedangkan **sebaran geolocation** menunjukkan **state SP** yang menempati posisi titik geolocation **paling banyak** dan paling sedikit sebarannya adalah `geolocation_state` **AP**. Namun, perlu diketahui bahwa untuk memahami pola sebaran geolokasi secara lebih mendalam tentu harus adanya analisis lebih lanjut.

**Rekomendasi**

> Berdasarkan temuan-temuan ini, beberapa rekomendasi dapat diberikan. Pertama, perlu dilakukan analisis lebih lanjut untuk mengetahui **penyebab penurunan** performa pada **bulan September 2018**. Faktor seperti keberadaan kompetitor dan kampanye pemasaran perlu dipertimbangkan. Selain itu, perlu ditingkatkan upaya pemasaran untuk produk-produk dengan penjualan rendah, seperti `Security and Services`.

> Dalam hal **pengiriman produk**, perlu diperhatikan untuk memastikan bahwa pengiriman dilakukan dengan **tepat waktu** agar dapat memenuhi harapan pelanggan. Selain itu, perlu dipertimbangkan untuk menawarkan **metode pembayaran alternatif** yang lebih menarik bagi pelanggan, selain `credit_card`.
"""